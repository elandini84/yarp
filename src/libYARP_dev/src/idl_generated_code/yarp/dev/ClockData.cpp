/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/ClockData.h>

namespace yarp::dev {

// Constructor with field values
ClockData::ClockData(const std::int32_t sec,
                     const std::int32_t nsec) :
        WirePortable(),
        sec(sec),
        nsec(nsec)
{
}

// Read structure on a Wire
bool ClockData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_sec(reader)) {
        return false;
    }
    if (!read_nsec(reader)) {
        return false;
    }
    return !reader.isError();
}

// Read structure on a Connection
bool ClockData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    return read(reader);
}

// Write structure on a Wire
bool ClockData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_sec(writer)) {
        return false;
    }
    if (!write_nsec(writer)) {
        return false;
    }
    return !writer.isError();
}

// Write structure on a Connection
bool ClockData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    return write(writer);
}

// Convert to a printable string
std::string ClockData::toString() const
{
    yarp::os::Bottle b;
    b.read(*this);
    return b.toString();
}

// Editor: default constructor
ClockData::Editor::Editor()
{
    group = 0;
    obj_owned = true;
    obj = new ClockData;
    dirty_flags(false);
    yarp().setOwner(*this);
}

// Editor: constructor with base class
ClockData::Editor::Editor(ClockData& obj)
{
    group = 0;
    obj_owned = false;
    edit(obj, false);
    yarp().setOwner(*this);
}

// Editor: destructor
ClockData::Editor::~Editor()
{
    if (obj_owned) {
        delete obj;
    }
}

// Editor: edit
bool ClockData::Editor::edit(ClockData& obj, bool dirty)
{
    if (obj_owned) {
        delete this->obj;
    }
    this->obj = &obj;
    obj_owned = false;
    dirty_flags(dirty);
    return true;
}

// Editor: validity check
bool ClockData::Editor::isValid() const
{
    return obj != nullptr;
}

// Editor: state
ClockData& ClockData::Editor::state()
{
    return *obj;
}

// Editor: grouping begin
void ClockData::Editor::start_editing()
{
    group++;
}

// Editor: grouping end
void ClockData::Editor::stop_editing()
{
    group--;
    if (group == 0 && is_dirty) {
        communicate();
    }
}
// Editor: sec setter
void ClockData::Editor::set_sec(const std::int32_t sec)
{
    will_set_sec();
    obj->sec = sec;
    mark_dirty_sec();
    communicate();
    did_set_sec();
}

// Editor: sec getter
std::int32_t ClockData::Editor::get_sec() const
{
    return obj->sec;
}

// Editor: sec will_set
bool ClockData::Editor::will_set_sec()
{
    return true;
}

// Editor: sec did_set
bool ClockData::Editor::did_set_sec()
{
    return true;
}

// Editor: nsec setter
void ClockData::Editor::set_nsec(const std::int32_t nsec)
{
    will_set_nsec();
    obj->nsec = nsec;
    mark_dirty_nsec();
    communicate();
    did_set_nsec();
}

// Editor: nsec getter
std::int32_t ClockData::Editor::get_nsec() const
{
    return obj->nsec;
}

// Editor: nsec will_set
bool ClockData::Editor::will_set_nsec()
{
    return true;
}

// Editor: nsec did_set
bool ClockData::Editor::did_set_nsec()
{
    return true;
}

// Editor: clean
void ClockData::Editor::clean()
{
    dirty_flags(false);
}

// Editor: read
bool ClockData::Editor::read(yarp::os::ConnectionReader& connection)
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        return false;
    }
    int len = reader.getLength();
    if (len == 0) {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(1)) {
            return false;
        }
        writer.writeString("send: 'help' or 'patch (param1 val1) (param2 val2)'");
        return true;
    }
    std::string tag;
    if (!reader.readString(tag)) {
        return false;
    }
    if (tag == "help") {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(2)) {
            return false;
        }
        if (!writer.writeTag("many", 1, 0)) {
            return false;
        }
        if (reader.getLength() > 0) {
            std::string field;
            if (!reader.readString(field)) {
                return false;
            }
            if (field == "sec") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::int32_t sec")) {
                    return false;
                }
            }
            if (field == "nsec") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::int32_t nsec")) {
                    return false;
                }
            }
        }
        if (!writer.writeListHeader(3)) {
            return false;
        }
        writer.writeString("*** Available fields:");
        writer.writeString("sec");
        writer.writeString("nsec");
        return true;
    }
    bool nested = true;
    bool have_act = false;
    if (tag != "patch") {
        if (((len - 1) % 2) != 0) {
            return false;
        }
        len = 1 + ((len - 1) / 2);
        nested = false;
        have_act = true;
    }
    for (int i = 1; i < len; ++i) {
        if (nested && !reader.readListHeader(3)) {
            return false;
        }
        std::string act;
        std::string key;
        if (have_act) {
            act = tag;
        } else if (!reader.readString(act)) {
            return false;
        }
        if (!reader.readString(key)) {
            return false;
        }
        if (key == "sec") {
            will_set_sec();
            if (!obj->nested_read_sec(reader)) {
                return false;
            }
            did_set_sec();
        } else if (key == "nsec") {
            will_set_nsec();
            if (!obj->nested_read_nsec(reader)) {
                return false;
            }
            did_set_nsec();
        } else {
            // would be useful to have a fallback here
        }
    }
    reader.accept();
    yarp::os::idl::WireWriter writer(reader);
    if (writer.isNull()) {
        return true;
    }
    writer.writeListHeader(1);
    writer.writeVocab32('o', 'k');
    return true;
}

// Editor: write
bool ClockData::Editor::write(yarp::os::ConnectionWriter& connection) const
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(dirty_count + 1)) {
        return false;
    }
    if (!writer.writeString("patch")) {
        return false;
    }
    if (is_dirty_sec) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("sec")) {
            return false;
        }
        if (!obj->nested_write_sec(writer)) {
            return false;
        }
    }
    if (is_dirty_nsec) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("nsec")) {
            return false;
        }
        if (!obj->nested_write_nsec(writer)) {
            return false;
        }
    }
    return !writer.isError();
}

// Editor: send if possible
void ClockData::Editor::communicate()
{
    if (group != 0) {
        return;
    }
    if (yarp().canWrite()) {
        yarp().write(*this);
        clean();
    }
}

// Editor: mark dirty overall
void ClockData::Editor::mark_dirty()
{
    is_dirty = true;
}

// Editor: sec mark_dirty
void ClockData::Editor::mark_dirty_sec()
{
    if (is_dirty_sec) {
        return;
    }
    dirty_count++;
    is_dirty_sec = true;
    mark_dirty();
}

// Editor: nsec mark_dirty
void ClockData::Editor::mark_dirty_nsec()
{
    if (is_dirty_nsec) {
        return;
    }
    dirty_count++;
    is_dirty_nsec = true;
    mark_dirty();
}

// Editor: dirty_flags
void ClockData::Editor::dirty_flags(bool flag)
{
    is_dirty = flag;
    is_dirty_sec = flag;
    is_dirty_nsec = flag;
    dirty_count = flag ? 2 : 0;
}

// read sec field
bool ClockData::read_sec(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(sec)) {
        reader.fail();
        return false;
    }
    return true;
}

// write sec field
bool ClockData::write_sec(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(sec)) {
        return false;
    }
    return true;
}

// read (nested) sec field
bool ClockData::nested_read_sec(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(sec)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) sec field
bool ClockData::nested_write_sec(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(sec)) {
        return false;
    }
    return true;
}

// read nsec field
bool ClockData::read_nsec(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(nsec)) {
        reader.fail();
        return false;
    }
    return true;
}

// write nsec field
bool ClockData::write_nsec(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(nsec)) {
        return false;
    }
    return true;
}

// read (nested) nsec field
bool ClockData::nested_read_nsec(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(nsec)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) nsec field
bool ClockData::nested_write_nsec(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(nsec)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
