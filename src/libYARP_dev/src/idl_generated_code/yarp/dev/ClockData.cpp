/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/ClockData.h>

namespace yarp::dev {

// Constructor with field values
ClockData::ClockData(const std::int32_t sec,
                     const std::int32_t nsec) :
        WirePortable(),
        sec(sec),
        nsec(nsec)
{
}

// Read structure on a Wire
bool ClockData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_sec(reader)) {
        return false;
    }
    if (!read_nsec(reader)) {
        return false;
    }
    return !reader.isError();
}

// Read structure on a Connection
bool ClockData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    return read(reader);
}

// Write structure on a Wire
bool ClockData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_sec(writer)) {
        return false;
    }
    if (!write_nsec(writer)) {
        return false;
    }
    return !writer.isError();
}

// Write structure on a Connection
bool ClockData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    return write(writer);
}

// Convert to a printable string
std::string ClockData::toString() const
{
    yarp::os::Bottle b;
    b.read(*this);
    return b.toString();
}

// read sec field
bool ClockData::read_sec(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(sec)) {
        reader.fail();
        return false;
    }
    return true;
}

// write sec field
bool ClockData::write_sec(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(sec)) {
        return false;
    }
    return true;
}

// read (nested) sec field
bool ClockData::nested_read_sec(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(sec)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) sec field
bool ClockData::nested_write_sec(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(sec)) {
        return false;
    }
    return true;
}

// read nsec field
bool ClockData::read_nsec(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(nsec)) {
        reader.fail();
        return false;
    }
    return true;
}

// write nsec field
bool ClockData::write_nsec(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(nsec)) {
        return false;
    }
    return true;
}

// read (nested) nsec field
bool ClockData::nested_read_nsec(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(nsec)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) nsec field
bool ClockData::nested_write_nsec(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(nsec)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
