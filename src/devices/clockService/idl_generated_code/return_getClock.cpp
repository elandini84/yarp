/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <return_getClock.h>

// Constructor with field values
return_getClock::return_getClock(const bool retValue,
                                 const yarp::dev::ClockData& returnedClock) :
        WirePortable(),
        retValue(retValue),
        returnedClock(returnedClock)
{
}

// Read structure on a Wire
bool return_getClock::read(yarp::os::idl::WireReader& reader)
{
    if (!read_retValue(reader)) {
        return false;
    }
    if (!nested_read_returnedClock(reader)) {
        return false;
    }
    return !reader.isError();
}

// Read structure on a Connection
bool return_getClock::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    return read(reader);
}

// Write structure on a Wire
bool return_getClock::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_retValue(writer)) {
        return false;
    }
    if (!nested_write_returnedClock(writer)) {
        return false;
    }
    return !writer.isError();
}

// Write structure on a Connection
bool return_getClock::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    return write(writer);
}

// Convert to a printable string
std::string return_getClock::toString() const
{
    yarp::os::Bottle b;
    b.read(*this);
    return b.toString();
}

// read retValue field
bool return_getClock::read_retValue(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(retValue)) {
        reader.fail();
        return false;
    }
    return true;
}

// write retValue field
bool return_getClock::write_retValue(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(retValue)) {
        return false;
    }
    return true;
}

// read (nested) retValue field
bool return_getClock::nested_read_retValue(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(retValue)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) retValue field
bool return_getClock::nested_write_retValue(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(retValue)) {
        return false;
    }
    return true;
}

// read returnedClock field
bool return_getClock::read_returnedClock(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(returnedClock)) {
        reader.fail();
        return false;
    }
    return true;
}

// write returnedClock field
bool return_getClock::write_returnedClock(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(returnedClock)) {
        return false;
    }
    return true;
}

// read (nested) returnedClock field
bool return_getClock::nested_read_returnedClock(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(returnedClock)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) returnedClock field
bool return_getClock::nested_write_returnedClock(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(returnedClock)) {
        return false;
    }
    return true;
}
